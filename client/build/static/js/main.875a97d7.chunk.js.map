{"version":3,"sources":["components/about/index.js","components/home/index.js","actions/user_actions.js","actions/types.js","components/RegisterLogin/index.js","components/App.js","serviceWorker.js","reducers/index.js","reducers/user_reducer.js","index.js"],"names":["About","Component","Home","loginUser","dataToSubmit","type","payload","axios","post","then","response","data","RegisterLogin","state","email","password","errors","displayErrors","map","error","i","key","handleChange","event","setState","target","name","value","submitform","preventDefault","isformvalid","props","dispatch","console","log","className","this","onChange","e","id","htmlFor","data-error","data-success","length","onClick","connect","user","App","style","paddingTop","minHeight","exact","path","component","Login","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","loginSuccess","createStoreWithMiddleware","applyMiddleware","promiseMiddleware","ReduxThunk","createStore","ReactDOM","render","store","Reducer","__REDUX_DEVTOOLS_EXTENSION__","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"qPAGqBA,E,uKAGb,OACI,yD,GAJuBC,aCAdC,E,uKAGb,OACI,wD,GAJsBD,a,iCCK3B,SAASE,EAAUC,GAIvB,MAAO,CACHC,KCbmB,aDcnBC,QALWC,IAAMC,KAAK,mBAAoBJ,GAC9CK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,IEJtBC,E,4MAIHC,MAAO,CACHC,MAAM,GACNC,SAAS,GACTC,OAAO,I,EAIbC,cAAgB,SAAAD,GAAM,OACtBA,EAAOE,KAAI,SAACC,EAAOC,GAAR,OAAa,uBAAGC,IAAKD,GAAID,O,EAElCG,aAAe,SAAAC,GACf,EAAKC,SAAL,eAAgBD,EAAME,OAAOC,KAAMH,EAAME,OAAOE,S,EAGhDC,WAAa,SAAAL,GACbA,EAAMM,iBACN,IAAIzB,EAAc,CACdU,MAAO,EAAKD,MAAMC,MAClBC,SAAU,EAAKF,MAAME,UAGrB,EAAKe,YAAY,EAAKjB,SACtB,EAAKW,SAAS,CAACR,OAAO,KACtB,EAAKe,MAAMC,SAAS7B,EAAUC,IAC7BK,MAAK,SAAAC,GAAQ,OAAIuB,QAAQC,IAAIxB,Q,EAInCoB,YAAa,gBAAEhB,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OAAuBD,GAASC,G,uDAKlC,IAAD,OACL,OACI,yBAAKoB,UAAU,aACf,qCACA,yBAAKA,UAAU,OACf,0BAAMA,UAAU,WAGZ,yBAAKA,UAAU,OACf,yBAAKA,UAAU,uBAEf,2BACIT,KAAK,QACLC,MAAOS,KAAKvB,MAAMC,MAClBuB,SAAU,SAAAC,GAAC,OAAE,EAAKhB,aAAagB,IAC/BC,GAAG,QACHlC,KAAK,QACL8B,UAAU,aAEd,2BAAOK,QAAQ,SAAf,UACA,0BAAML,UAAU,cAChBM,aAAW,yBACXC,eAAa,WAKb,yBAAKP,UAAU,OACf,yBAAKA,UAAU,uBAEf,2BACIT,KAAK,WACLC,MAAOS,KAAKvB,MAAME,SACnBsB,SAAU,SAAAC,GAAC,OAAE,EAAKhB,aAAagB,IAC9BC,GAAG,WACHlC,KAAK,WACL8B,UAAU,aAEd,2BAAOK,QAAQ,SAAf,aACA,0BAAML,UAAU,cAChBM,aAAW,iBACXC,eAAa,YAORN,KAAKvB,MAAMG,OAAO2B,OAAS,GACxB,6BACIP,KAAKnB,cAAcmB,KAAKvB,MAAMG,SAI1C,yBAAKmB,UAAU,OACf,yBAAKA,UAAU,UACf,4BACAA,UAAU,uBACV9B,KAAK,SACLqB,KAAK,SACLkB,QAASR,KAAKR,YAJd,mB,GA7Fa3B,aAyHd4C,mBANf,SAAyBhC,GACrB,MAAO,CACHiC,KAAMjC,EAAMiC,QAILD,CAA0BjC,GC5G1BmC,MAZf,WACE,OACE,yBAAKC,MAAO,CAAEC,WAAY,OAAQC,UAAW,uBAC7C,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnD,IAC/B,kBAAC,IAAD,CAAOiD,OAAK,EAACC,KAAK,SAASC,UAAWrD,IACtC,kBAAC,IAAD,CAAOmD,OAAK,EAACC,KAAK,SAASC,UAAWC,OCDxBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4DCXSC,EAJKC,YAAgB,CAChCf,KCEW,WAA0B,IAAjBjC,EAAgB,uDAAV,GAAGiD,EAAO,uCACpC,OAAOA,EAAOzD,MACV,ILRkB,aKSd,OAAO,2BAAIQ,GAAX,IAAkBkD,aAAcD,EAAOxD,UAE3C,QACI,OAAOO,MCGbmD,EAA4BC,YAAgBC,IAAmBC,IAAnCF,CAA+CG,KAEjFC,IAASC,OACP,kBAAC,IAAD,CACAC,MAAOP,EACHQ,EACAhB,OAAOiB,8BACPjB,OAAOiB,iCAGX,kBAAC,IAAD,KACI,kBAAC,EAAD,QAGJC,SAASC,eAAe,SHsGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrE,MAAK,SAAAsE,GACJA,EAAaC,gBAEdC,OAAM,SAAA9D,GACLc,QAAQd,MAAMA,EAAM+D,c","file":"static/js/main.875a97d7.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n\r\nexport default class About extends Component {\r\n \r\n    render() {\r\n        return (\r\n            <div>\r\n                This is a About page\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\n\r\nexport default class Home extends Component {\r\n \r\n    render() {\r\n        return (\r\n            <div>\r\n                This is a home page\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\n\r\nimport {\r\n    LOGIN_USER \r\n} from './types'\r\n\r\n\r\nexport function loginUser(dataToSubmit) {\r\n  const request = axios.post('/api/users/login', dataToSubmit)\r\n  .then(response => response.data)   \r\n\r\n   return {\r\n       type: LOGIN_USER,\r\n       payload: request\r\n   }\r\n}\r\n","export const LOGIN_USER = 'login_user';","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {loginUser} from '../../actions/user_actions'\r\n\r\n\r\n\r\n class RegisterLogin extends Component {\r\n\r\n\r\n  \r\n    state= {\r\n        email:\"\",\r\n        password:\"\",\r\n        errors:[]\r\n    }\r\n\r\n\r\n  displayErrors = errors =>\r\n  errors.map((error, i)=> <p key={i}>{error}</p> )\r\n\r\n    handleChange = event => {\r\n    this.setState({[event.target.name]:event.target.value})\r\n    }\r\n\r\n    submitform = event => {\r\n    event.preventDefault();\r\n    let dataToSubmit ={\r\n        email: this.state.email,\r\n        password: this.state.password\r\n\r\n    };\r\n    if (this.isformvalid(this.state)){\r\n        this.setState({errors:[]})\r\n        this.props.dispatch(loginUser(dataToSubmit))\r\n        .then(response => console.log(response))\r\n    }\r\n}\r\n\r\n   isformvalid =({email, password}) => email && password;\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n            <h2>Login</h2>\r\n            <div className=\"row\">\r\n            <form className=\"col s12\" \r\n            //onSubmit={event =>this.submitform(event)}\r\n            >\r\n                <div className=\"row\">\r\n                <div className=\"input-field col s12\">\r\n\r\n                <input\r\n                    name=\"email\"\r\n                    value={this.state.email}\r\n                    onChange={e=>this.handleChange(e)}\r\n                    id=\"email\"\r\n                    type=\"email\"\r\n                    className=\"validate\"\r\n                />\r\n                <label htmlFor=\"email\"> Email</label>\r\n                <span className=\"helper-text\"\r\n                data-error=\"typea right type email\"\r\n                data-success=\"right\" />\r\n\r\n                </div>\r\n\r\n               \r\n                <div className=\"row\">\r\n                <div className=\"input-field col s12\">\r\n\r\n                <input\r\n                    name=\"password\"\r\n                    value={this.state.password}\r\n                   onChange={e=>this.handleChange(e)}\r\n                    id=\"password\"\r\n                    type=\"password\"\r\n                    className=\"validate\"\r\n                />\r\n                <label htmlFor=\"email\"> Password</label>\r\n                <span className=\"helper-text\"\r\n                data-error=\"wrong password\"\r\n                data-success=\"right\" />\r\n\r\n                </div>\r\n\r\n                </div>\r\n\r\n\r\n                    {this.state.errors.length > 0 && (\r\n                        <div>\r\n                           {this.displayErrors(this.state.errors)}\r\n                        </div>\r\n                    )}\r\n\r\n                <div className=\"row\">\r\n                <div className=\"col 12\">\r\n                <button\r\n                className=\"btn waves-effect red\"\r\n                type=\"submit\"\r\n                name=\"action\"\r\n                onClick={this.submitform}\r\n                >\r\n                    Login\r\n                </button>\r\n\r\n                </div>\r\n\r\n                </div>\r\n\r\n                </div>\r\n            </form>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        user: state.user\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps) (RegisterLogin);","import React from 'react';\nimport { Route, Switch } from \"react-router-dom\";\nimport About from './about'\nimport Home from './home'\nimport Login from './RegisterLogin'\n\n\nfunction App() {\n  return (\n    <div style={{ paddingTop: '69px', minHeight: 'calc(100vh - 80px)' }}>\n    <Switch>\n    <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/about\" component={About} />\n      <Route exact path=\"/login\" component={Login} />\n    </Switch>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport user from './user_reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    user,\r\n});\r\n\r\nexport default rootReducer;","import {\r\n    LOGIN_USER\r\n\r\n} from '../actions/types'\r\n \r\n\r\nexport default function(state={},action){\r\n    switch(action.type){\r\n        case LOGIN_USER:\r\n            return {...state, loginSuccess: action.payload}\r\n      \r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport \"materialize-css/dist/css/materialize.min.css\";\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport promiseMiddleware from 'redux-promise';\nimport ReduxThunk from 'redux-thunk';\nimport Reducer from './reducers';\n\nconst createStoreWithMiddleware = applyMiddleware(promiseMiddleware, ReduxThunk)(createStore);\n\nReactDOM.render(\n  <Provider\n  store={createStoreWithMiddleware(\n      Reducer,\n      window.__REDUX_DEVTOOLS_EXTENSION__ &&\n      window.__REDUX_DEVTOOLS_EXTENSION__()\n  )}\n>\n  <BrowserRouter>\n      <App />\n  </BrowserRouter>\n</Provider>\n, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}